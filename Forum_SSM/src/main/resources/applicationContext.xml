<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:aop="http://www.springframework.org/schema/aop"
 	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd 
	http://www.springframework.org/schema/util 
	http://www.springframework.org/schema/util/spring-util.xsd ">
	
	<!--开启注解的扫描，希望处理service和dao，controller不需要Spring框架去处理-->
    <context:component-scan base-package="com.lmj" >
        <!--配置哪些注解不扫描-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan> 
 	
 	<!-- 读取db.properties -->
	<context:property-placeholder location="classpath:db.properties"/>
	
	<!-- 配置c3p0连接池 -->
	<bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driver}"/>
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="user" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<!-- 初始化连接大小 -->
        <property name="initialPoolSize" value="${jdbc.initialSize}"></property>
        <!-- 连接池最大数量 -->
        <property name="maxPoolSize" value="${jdbc.maxIdle}"></property>
        <property name="minPoolSize" value="${jdbc.minIdle}"></property>
        <!--acquireIncrement：链接用完了自动增量2个。 -->
        <property name="acquireIncrement" value="${jdbc.acquireIncrement}"></property>
        <!--acquireRetryAttempts：链接失败后重新试30次。-->
    	<property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}"></property>
    	<!--//下面两个属性就是设置c3p0隔28800秒自动检测与数据库的连接（28800也是mysql的默认的连接超时时间）-->
		<property name="testConnectionOnCheckin" value="${jdbc.testConnectionOnCheckin}"></property>
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"></property>
	</bean>
	
	<!-- 配置mybatis sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 配置数据源  -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 告诉spring mybatis的核心配置文件 -->
		<!--<property name="configLocation" value="classpath:sqlMapConfig.xml"/>-->
		
		<!-- 配置别名，使用包扫描 -->
        <property name="typeAliasesPackage" value="com.lmj.model"></property>
	</bean>
	
	<!-- mapper动态扫描开发,即创建SqlSession对象 -->
	<bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.lmj.dao"/>
		<!-- 可选，如果不写，Spring启动时候。容器中。自动会按照类型去把SqlSessionFactory对象注入进来 -->
        <!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/> -->
	</bean>
	
<!-- 	<bean name="userMapper" class="com.lmj.dao.UserMapper"></bean> -->
	<!-- service -->
<!--  	<bean name="dataService" class="com.lmj.service.DataServiceImpl"></bean> -->
 	
 	
 	<!-- 需要事务核心管理器 -->
	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- 配置事务通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="Insert*" isolation="DEFAULT"  propagation="REQUIRED" read-only="false"/>
			<tx:method name="Delete*" isolation="DEFAULT"  propagation="REQUIRED" read-only="false"/>
			<tx:method name="Update*" isolation="DEFAULT"  propagation="REQUIRED" read-only="false"/>
			<tx:method name="Find*" isolation="DEFAULT"  propagation="REQUIRED" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 配置 -->
	<!-- public void com.lmj.service.UserServiceImpl.save() -->
	<!-- * com.lmj.service.*ServiceImpl.*(..) -->
	<aop:config>
		<!-- 配置切入点 -->
		<aop:pointcut expression="execution(* com.lmj.service.*ServiceImpl.*(..))" id="txPc"/>
		 <!-- 配置切面= 切入点+通知 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPc"/>
	</aop:config>
</beans>